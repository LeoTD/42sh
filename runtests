#!/bin/bash

function reportit() {
	if [[ "$1" == "$2" ]]; then
		echo "ok: $1"
	else
		printf "fail:\n\texpected '$2'\n\tgot '$1'\n"
	fi
}

function testit() {
	declare -a ourary
	declare -a theirary

	while read -r line; do
		ourary+=("$line")
	done < <(./42sh $1)

	while read -r line2; do
		theirary+=("$line2")
	done < <(eval "$1")

	oursjoined=$( IFS=, ; echo "${ourary[*]}" )
	theirsjoined=$( IFS=, ; echo "${theirary[*]}" )

	reportit "$oursjoined" "$theirsjoined"
}

function testem() {
	# Quotes are always screwed up when testing this way, whether they work
	# in the interactive shell or not. Also, in here we have to leave spaces
	# around &&, || and semicolon. Not true in the actual program.
	testit "echo hello world";
	testit "echo hello world | tr a-z A-Z";
	testit "echo hw | grep nope && echo no || echo yes"
	testit "echo a && echo b && echo c || echo d || echo e && echo f"
	testit "echo simple trunc redirect | sed s/trunc// >afile ; cat afile"
	testit "cat < author"
	testit "echo trunc > afile ; echo append >> afile ; cat afile"
	testit "echo redirect with fds 2>&1 >afile ; cat afile"
	rm afile
};

testem
